#!/usr/bin/env bash

# Use Cadius to create disk images for distribution
# https://github.com/mach-kernel/cadius

set -e
source "bin/util.sh"

if ! command -v "cadius" >/dev/null; then
    cecho red "Cadius not installed."
    exit 1
fi

tempdir=$(mktemp -d "${TMPDIR:-/tmp}/pkg.XXXXXXXXX")
test -d "${tempdir}" || (cecho red "cannot make tempdir"; exit 1)

# ============================================================
# Extract metadata for the build

vmajor=$(grep 'kDeskTopVersionMajor =' config.inc | sed -e 's/.* = //')
vminor=$(grep 'kDeskTopVersionMinor =' config.inc | sed -e 's/.* = //')
vsuffix=$(grep 'define kDeskTopVersionSuffix' config.inc | cut -d'"' -f2)
lang=$(grep 'define kBuildLang' config.inc | cut -d'"' -f2)
version=$(echo ${vmajor}.${vminor}${vsuffix}-${lang})

# ============================================================
# Define and create the disk images

cecho yellow "Building disk images: $version"

# One 800k image (complete), and two 140k images (two parts).

mkdir -p out
IMGFILE_COMPLETE_2MG="out/A2DeskTop-${version}_800k.2mg"
IMGFILE_COMPLETE_HDV="out/A2DeskTop-${version}_800k.hdv"
IMGFILE_PART1="out/A2DeskTop-${version}_140k_disk1.po"
IMGFILE_PART2="out/A2DeskTop-${version}_140k_disk2.po"

VOLNAME_COMPLETE="A2.DeskTop"
VOLNAME_PART1="A2.DeskTop.1"
VOLNAME_PART2="A2.DeskTop.2"

IMAGES="$IMGFILE_COMPLETE_2MG $IMGFILE_COMPLETE_HDV $IMGFILE_PART1 $IMGFILE_PART2"

# Create disk images.

for img in $IMAGES; do
    rm -f "$img"
done

suppress cadius CREATEVOLUME $IMGFILE_COMPLETE_2MG $VOLNAME_COMPLETE 800KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_COMPLETE_HDV $VOLNAME_COMPLETE 800KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_PART1 $VOLNAME_PART1 140KB --quiet --no-case-bits
suppress cadius CREATEVOLUME $IMGFILE_PART2 $VOLNAME_PART2 140KB --quiet --no-case-bits

# Add a file to the appropriate images.
# Usage: add_file PARTN SRCFILE FOLDER DSTFILE TYPESUFFIX
add_file () {
    # Add the files into the disk images.
    # Usage: add_file_internal IMGFILE SRCFILE DSTFOLDER DSTFILE TYPESUFFIX
    add_file_internal () {
        local img_file="$1"
        local src_file="$2"
        local folder="$3"
        local dst_file="$4"
        local suffix="$5"

        local tmp_file="$tempdir/$dst_file#$suffix"
        cp "$src_file" "$tmp_file"
        suppress cadius ADDFILE "$img_file" "$folder" "$tmp_file" --quiet --no-case-bits
        rm "$tmp_file"
    }

    local disposition="$1"
    local src_file="$2"
    local folder="$3"
    local dst_file="$4"
    local suffix="$5"

    add_file_internal $IMGFILE_COMPLETE_2MG "$src_file" "/$VOLNAME_COMPLETE/$folder" "$dst_file" "$suffix"
    add_file_internal $IMGFILE_COMPLETE_HDV "$src_file" "/$VOLNAME_COMPLETE/$folder" "$dst_file" "$suffix"
    if [ "$disposition" = "required" ]; then
        add_file_internal $IMGFILE_PART1 "$src_file" "/$VOLNAME_PART1/$folder" "$dst_file" "$suffix"
    else
        add_file_internal $IMGFILE_PART2 "$src_file" "/$VOLNAME_PART2/$folder" "$dst_file" "$suffix"
    fi
}

# Create a folder on the appropriate images.
# Usage: create_folder PARTN PATH
create_folder() {
    # Create a folder in the volume
    # Usage: create_folder_internal IMGFILE PATH
    create_folder_internal () {
        local img_file="$1"
        local path="$2"
        suppress cadius CREATEFOLDER "$img_file" "$path" --quiet --no-case-bits
    }

    local disposition="$1"
    local path="$2"

    create_folder_internal $IMGFILE_COMPLETE_2MG "/$VOLNAME_COMPLETE/$path"
    create_folder_internal $IMGFILE_COMPLETE_HDV "/$VOLNAME_COMPLETE/$path"
    if [ "$disposition" = "required" ]; then
        create_folder_internal $IMGFILE_PART1 "/$VOLNAME_PART1/$path"
    else
        create_folder_internal $IMGFILE_PART2 "/$VOLNAME_PART2/$path"
    fi
}

get_da_loc_name() {
    local res="res_filename_${1//./_}"
    local filename="desk.acc/res/filenames.res.${lang}"
    local match=$(egrep -i "^\.define ${res} " "${filename}" | cut -d' ' -f3)
    test -n "$match" && echo "$match" # else returns false
}

get_da_loc_path() {
    local path="$1"
    if [[ "$path" == */* ]]; then
        head=$(expr "$path" : '\(.*\)/')
        tail=$(expr "$path" : '.*/\(.*\)')
        tail=$(get_da_loc_name "$tail" || echo "$tail")
        path="$head/$tail"
    fi
    echo $path
}

# ============================================================
# Populate the images with files and directories

# Part 1: The bare minimum for a bootable disk.
disposition="required"

# Add ProDOS
add_file $disposition "res/package/PRODOS" "" "ProDOS" FF0000

# Add READ.ME
perl -p -i -e 's/\r?\n/\r/g' "res/package/READ.ME" # Ensure Apple line endings
add_file $disposition "res/package/READ.ME" "" "Read.Me" 040000
perl -p -i -e 's/\r/\n/g' "res/package/READ.ME" # Restore Unix line endings

# Add Launcher and DeskTop
add_file $disposition "desktop.system/out/desktop.system.SYS" "" "DeskTop.system" FF0000
add_file $disposition "desktop/out/desktop.built" "" "DeskTop2" F10000

# Part 2: Optional extras.
disposition="optional"

# Add Selector
create_folder $disposition "Optional"
add_file $disposition "selector/out/selector.built" "Optional" "Selector" F10000
add_file $disposition "res/package/UNSHRINK" "Optional" "UnShrink" FF0000

# Add Desk Accessories
for path in $(cat desk.acc/TARGETS | bin/targets.pl dirs); do
    ploc=$(get_da_loc_path "$path")
    create_folder $disposition $ploc
done
for line in $(cat desk.acc/TARGETS | bin/targets.pl); do
    IFS=',' read -ra array <<< "$line"
    file="${array[0]}"
    loc=$(get_da_loc_name "$file" || echo "$file")
    path="${array[1]}"
    ploc=$(get_da_loc_path "$path")
    add_file $disposition "desk.acc/out/$file.da" "$ploc" "$loc" F10641
done

# Add BASIC.SYSTEM
add_file $disposition "res/package/BASIC.SYSTEM" "" "BASIC.system" FF2000

# ============================================================
# Verify and clean up

for img in $IMAGES; do
    ls -l "$img"
done

rmdir "$tempdir"
